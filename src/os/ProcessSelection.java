/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package os;

import java.util.Objects;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 *
 * @author User
 */
public class ProcessSelection extends javax.swing.JFrame {
    
    
    String[][] processArray;
    String[][] processArr;
    int index;
    int counter;
    int noOfProcesses;
    
     
   
    
    

    /**
     * Creates new form ProcessSelection
     */
    
    public ProcessSelection() {
       
        initComponents();
    }
    
    
    public ProcessSelection(String[][] processArr) {
        this.processArr = processArr;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtExeTime = new javax.swing.JTextField();
        txtProcessNum = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboNoOfProcesses = new javax.swing.JComboBox();
        txtArrivalTime = new javax.swing.JTextField();
        txtDeadline = new javax.swing.JTextField();
        comboProcessWeight = new javax.swing.JComboBox();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jMenu1.setText("jMenu1");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Process Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(51, 51, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(51, 51, 255));

        btnNext.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnNext.setForeground(new java.awt.Color(51, 51, 255));
        btnNext.setText("Next>>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToNext(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnPrevious.setForeground(new java.awt.Color(51, 0, 255));
        btnPrevious.setText("<<Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveToPrevious(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Process ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Process name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Arrival time(ms):");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Deadline(ms):");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Execution time(ms):");

        txtName.setEditable(false);
        txtName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtName.setForeground(new java.awt.Color(255, 0, 0));
        txtName.setText("A");
        txtName.setDisabledTextColor(new java.awt.Color(0, 0, 255));
        txtName.setSelectedTextColor(new java.awt.Color(51, 51, 0));
        txtName.setSelectionColor(new java.awt.Color(51, 0, 51));

        txtExeTime.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtExeTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtExeTimeActionPerformed(evt);
            }
        });

        txtProcessNum.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        txtProcessNum.setText("1");

        btnSubmit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSubmit.setForeground(new java.awt.Color(51, 51, 255));
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setText("Process Weight:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Number of processes");

        comboNoOfProcesses.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        comboNoOfProcesses.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "4", "5", "6", "7", "8" }));
        comboNoOfProcesses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboNoOfProcessesActionPerformed(evt);
            }
        });

        txtArrivalTime.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtDeadline.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        comboProcessWeight.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        comboProcessWeight.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "High", "Medium", "Low" }));
        comboProcessWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProcessWeightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(164, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(75, 75, 75)
                        .addComponent(comboNoOfProcesses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)))
                .addContainerGap(164, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNext)
                .addGap(58, 58, 58))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDeadline, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtExeTime, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboProcessWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(244, 244, 244)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtProcessNum, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboNoOfProcesses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtProcessNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(txtArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(txtDeadline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(txtExeTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(comboProcessWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel4)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel5)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel6)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel9)))
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNext)
                    .addComponent(btnPrevious))
                .addGap(35, 35, 35)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtExeTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExeTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtExeTimeActionPerformed
    
     
    private void moveToNext(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToNext
        
        if(noOfProcesses!=comboNoOfProcesses.getSelectedIndex()+3){
            noOfProcesses =  comboNoOfProcesses.getSelectedIndex()+3;
            processArray = new String[noOfProcesses][5];
        }
        
       
        int processNum = Integer.valueOf(txtProcessNum.getText());
        
        if(processNum<noOfProcesses || processNum==noOfProcesses){
            
            processArray[processNum-1][0] = txtName.getText();
            
            try{
            if(Objects.equals(Integer.valueOf(txtArrivalTime.getText()), Integer.valueOf(txtDeadline.getText())) || Integer.valueOf(txtArrivalTime.getText()) >Integer.valueOf(txtDeadline.getText()) )
                JOptionPane.showMessageDialog(this, "Invalid data input", "ERROR", 0);
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(this, "Invalid data input", "ERROR", 0);
            }
            
            
            processArray[processNum-1][1] = txtArrivalTime.getText();
            processArray[processNum-1][2] = txtDeadline.getText();
            processArray[processNum-1][3] = txtExeTime.getText();
            
            int ProcessWeight = comboProcessWeight.getSelectedIndex(); 
            
            if(processArray[processNum-1][4]==null){
                if(ProcessWeight==0)
                   processArray[processNum-1][4] = "High"; 
                else if(ProcessWeight==1)
                   processArray[processNum-1][4] = "Medium";
                else if(ProcessWeight==2)
                   processArray[processNum-1][4] = "Low";
            }
            
             
            if(processNum<noOfProcesses){
                txtProcessNum.setText(String.valueOf(processNum+1));
                
                char ch = (txtName.getText()).charAt(0);
                System.out.println((ch++)+"-weight: "+processArray[processNum-1][4]);
                txtName.setText(String.valueOf(ch++));
                
                txtArrivalTime.setText(processArray[processNum][1]);
                txtDeadline.setText(processArray[processNum][2]);
                txtExeTime.setText(processArray[processNum][3]);
                
                if(processArray[processNum][4]!=null){
                    switch (processArray[processNum][4]) {
                        case "High":
                            comboProcessWeight.setSelectedIndex(0);
                            break;
                        case "Medium":
                            comboProcessWeight.setSelectedIndex(1);
                            break;
                        case "Low":
                            comboProcessWeight.setSelectedIndex(2);
                            break;
                }
                    
            }
            
            //System.out.println("preArrValue "+processArray[processNum-1][1]+" index "+(processNum-1));
          

            }        
        }
        
        
    }//GEN-LAST:event_moveToNext

    private void moveToPrevious(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveToPrevious
        
        if(noOfProcesses!=comboNoOfProcesses.getSelectedIndex()+3){
            noOfProcesses =  comboNoOfProcesses.getSelectedIndex()+3;
            processArray = new String[noOfProcesses][5];
        }
        
        int processNum = Integer.valueOf(txtProcessNum.getText());
        
        if(processNum>0){
            
            processArray[processNum-1][0] = txtName.getText();
            
            try{
            if(Objects.equals(Integer.valueOf(txtArrivalTime.getText()), Integer.valueOf(txtDeadline.getText())) || Integer.valueOf(txtArrivalTime.getText()) >Integer.valueOf(txtDeadline.getText()) )
                //new Error().setVisible(true);
                JOptionPane.showMessageDialog(this, "Invalid data input", "ERROR", 0);
            }catch(NumberFormatException e){
                //new Error().setVisible(true);
                JOptionPane.showMessageDialog(this, "Invalid data input", "ERROR", 0);
            }
            
            processArray[processNum-1][1] = txtArrivalTime.getText();
            processArray[processNum-1][2] = txtDeadline.getText();
            processArray[processNum-1][3] = txtExeTime.getText();
            int ProcessWeight = comboProcessWeight.getSelectedIndex(); 
            
            if(processArray[processNum-1][4]==null){
                if(ProcessWeight==0)
                   processArray[processNum-1][4] = "High"; 
                else if(ProcessWeight==1)
                   processArray[processNum-1][4] = "Medium";
                else if(ProcessWeight==2)
                   processArray[processNum-1][4] = "Low";
            }
            
            if(processNum>1){
                txtProcessNum.setText(String.valueOf(processNum-1));
                
                char ch = (txtName.getText()).charAt(0);
                System.out.println((ch--)+"-weight: "+processArray[processNum-1][4]);
                txtName.setText(String.valueOf(ch--));
                
                txtArrivalTime.setText(processArray[processNum-2][1]);
                txtDeadline.setText(processArray[processNum-2][2]);
                txtExeTime.setText(processArray[processNum-2][3]);
                //System.out.println("!!!!!!!!! "+processArray[processNum-2][4]);
                switch (processArray[processNum-2][4]) {
                    case "High":
                        comboProcessWeight.setSelectedIndex(0);
                        break;
                    case "Medium":
                        comboProcessWeight.setSelectedIndex(1);
                        break;
                    case "Low":
                        comboProcessWeight.setSelectedIndex(2);
                        break;
                }
            }
            
            //System.out.println("nextArrValue "+processArray[processNum-1][1]+" index "+(processNum-1));
        }
       
    }//GEN-LAST:event_moveToPrevious

    private void comboNoOfProcessesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboNoOfProcessesActionPerformed
        if(noOfProcesses!=comboNoOfProcesses.getSelectedIndex()+3){
            noOfProcesses =  comboNoOfProcesses.getSelectedIndex()+3;
            processArray = new String[noOfProcesses][5];
        }
        
        int processNum = Integer.valueOf(txtProcessNum.getText());
        if(processNum>comboNoOfProcesses.getSelectedIndex()+3)
            txtProcessNum.setText("1");
        noOfProcesses =  comboNoOfProcesses.getSelectedIndex()+3;
        //System.out.println(noOfProcesses);
        processArray = new String[noOfProcesses][5];
        
    }//GEN-LAST:event_comboNoOfProcessesActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        try{
            if(Objects.equals(Integer.valueOf(txtArrivalTime.getText()), Integer.valueOf(txtDeadline.getText())) || Integer.valueOf(txtArrivalTime.getText()) >Integer.valueOf(txtDeadline.getText()) )
                //new Error().setVisible(true);
                JOptionPane.showMessageDialog(this, "Invalid data input", "ERROR", 0);
            }catch(NumberFormatException e){
                //new Error().setVisible(true);
                JOptionPane.showMessageDialog(this, "Invalid data input", "ERROR", 0);
            }
        
        //noOfProcesses =  comboNoOfProcesses.getSelectedIndex()+3;
        //System.out.println(noOfProcesses);
        //processArray = new String[noOfProcesses][5];
        
        
        int processNum = Integer.valueOf(txtProcessNum.getText());
        processArray[processNum-1][0] = txtName.getText();
        processArray[processNum-1][1] = txtArrivalTime.getText();
        processArray[processNum-1][2] = txtDeadline.getText();
        processArray[processNum-1][3] = txtExeTime.getText();
            
        if(comboProcessWeight.getSelectedIndex()==0)
            processArray[processNum-1][4] = "High"; 
        else if(comboProcessWeight.getSelectedIndex()==1)
            processArray[processNum-1][4] = "Medium";
        else if(comboProcessWeight.getSelectedIndex()==2)
            processArray[processNum-1][4] = "Low";
        
        //below code part upto *********** line is to show the error msg when there is any incomplete process info at final submission
        //but it doesnt work.plz chk
        int i;
        boolean err=false;
        for(i=0;i<comboNoOfProcesses.getSelectedIndex()+3;i++){
            System.out.println("process: "+(i+1));
            int j;
            
            for(j=0;j<5;j++){
                
                if(processArray[i][j]==""){
                    System.out.println("@@@@@@");
                    err = true;
                    break;
                }
                
                 
                System.out.print(processArray[i][j]+" ");
            }
            if(err==true){
                System.out.println("i value: "+i);
                System.out.println("incomplete input");
                JFrame error = new IncompleteProcess();
                error.setVisible(true);
                break;
            }
            
            System.out.println(" ");
        }
        //*******************************************************************************
            
        this.processArr =  processArray; 
        this.setVisible(false);
        
        Simulator sim=new Simulator(processArr,processArr.length);
        sim.setVisible(true);
        
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void comboProcessWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProcessWeightActionPerformed
        if(noOfProcesses!=comboNoOfProcesses.getSelectedIndex()+3){
            noOfProcesses =  comboNoOfProcesses.getSelectedIndex()+3;
            processArray = new String[noOfProcesses][5];
        }
        
        int ProcessWeight = comboProcessWeight.getSelectedIndex(); 
        int processNum = Integer.valueOf(txtProcessNum.getText());   
        if(ProcessWeight==0)
            processArray[processNum-1][4] = "High"; 
        else if(ProcessWeight==1)
            processArray[processNum-1][4] = "Medium";
        else if(ProcessWeight==2)
            processArray[processNum-1][4] = "Low"; 
    }//GEN-LAST:event_comboProcessWeightActionPerformed

    

    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProcessSelection().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSubmit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox comboNoOfProcesses;
    private javax.swing.JComboBox comboProcessWeight;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtArrivalTime;
    private javax.swing.JTextField txtDeadline;
    private javax.swing.JTextField txtExeTime;
    public javax.swing.JTextField txtName;
    private javax.swing.JTextField txtProcessNum;
    // End of variables declaration//GEN-END:variables
}
